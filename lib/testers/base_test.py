import os
from lib.helpers import helper
from lib.hash_functions import algorithms


class BaseTest:

    def create_testdata(self, *args):
        '''creates the testdata and saves them in a specified folder

        :param args: TODO: abstract args
        '''
        raise NotImplementedError("Subclass must implement abstract method")

    def test(self, *args):
        # TODO: explain
        raise NotImplementedError("Subclass must implement abstract method")

    def result(self, *args):
        # TODO: explain
        raise NotImplementedError

    def create_testrun_folder(self, testname):
        '''creates individual testrunfolders with datetime stamp

        :param testname:

        :return: the path of the newly created folder

        :raise: OSERROR if folder cannot be created
        '''

        timestr = helper.gettimestring()
        foldername = timestr + "_" + testname
        path = "../../testdata/" + foldername

        try:
            os.mkdir(path)
        except OSError:
            print("Creation of the directory %s failed" % path)
        else:
            print("Successfully created the directory %s " % path)

        return path

    def manipulation_log_update(self, log1: list, log2: list) -> list:
        ''' merges a list (log1) that contains the changes applied to a file
            with a list that holds the current state (log2).

        log1 has the syntax: [...,
                             ["del", deletion_offset, deletion_end_offset],
                             ["sub", substitution_offset, substitution_end_offset],
                             ["ins", insertion_offset, insertion_end_offset],
                             ...]


        log2 has the syntax: [filesize,
                                [[substitution_start_offset, substitution_end_offset],...],
                                [[insertion_start_offset, insertion_end_offset],...]
                             ]

        :param log1:  log1; the changes sequentially in the order they occurred
        :param log2:  current file state
        :return: log_merged
        '''

        # iterate through the log1 file and update log2 with the information
        for i in log1:  # TODO: iteration doesn'T work correctly but i guess that can be fixed

            if i[0] == "del":
                # update filesize whenever bytes are deleted
                log2[0] -= int(i[2] - i[1])

                new_entry = [[i[1], i[2]]]
                # delete any overlapping tuple and update in subsituted tuples list
                log2[1] = helper.delete_overlapping_tuples_reindex(log2[1], new_entry)

                # delete any overlapping tuple and update in inserted tuples list
                log2[2] = helper.delete_overlapping_tuples_reindex(log2[2], new_entry)


            elif i[0] == "sub":
                # merge with list of other substitution offset tuples ...
                new_entry = [[i[1], i[2]]]
                log2[1].extend(new_entry)

                # ... find any overlapping offset tuples and update the list
                log2[1] = helper.merge_overlapping_tuples(log2[1])

                # TODO: update the insertion list.

            elif i[0] == "ins":
                log2[0] += i[2] - i[1]

                new_entry = [[i[1], i[2]]]
                log2[2] = helper.insert_reindex(log2[2], new_entry)
                log2[2] = helper.merge_overlapping_tuples(log2[2])
                # delete insert tuple and update in subsituted tuples list
                log2[1] = helper.placebo_insert_reindex(log2[1], new_entry)

        # substituted segments and inserted segments are merged if adjacent  [4,8][8,9] = [4,9]
        subsituted = log2[1]
        inserted = log2[2]

        log2[1] = helper.merge_adjacent_tuples(subsituted[:1], subsituted[1:])
        log2[2] = helper.merge_adjacent_tuples(inserted[:1], inserted[1:])

        return log2

    def get_log_arr(self, log: list) -> list:
        '''transforms a manipulation log state into a list  that represents the file state

        :param  log has the syntax: [filesize,
                                [[substitution_start_offset, substitution_end_offset],...],
                                [[insertion_start_offset, insertion_end_offset],...]
                             ]

        :return: list that represents the file state |

            [15,
                [[1,2],[6,8]],
                [[10,11],[13,14]]
            ]

            ---> [[], [], [], ..... ]

        '''

        filesize = log[0]
        a = log[1] # substituted segments
        b = log[2] # overwritten segments

        #concat a list of inserted and overwritten segments
        list_1 = (a + b)
        #sort the list
        list_1.sort(key=lambda s: s[1])
        list_1.sort(key=lambda i: i[0])

        list2_ov = helper.merge_overlapping_tuples(list_1)
        list2 = helper.merge_adjacent_tuples(list2_ov[:1], list2_ov[1:])


        missing_segments = helper.get_missing(list2, 0, filesize)
        # all the missing (unchanged) segments get a boolean marker so the can be registered as unchanged
        for i in missing_segments:
            i.append(False)

        # all the changed segments get a boolean marker so the can be registered as changed
        for i in list2:
            i.append(True)

        total_segments = list2 + missing_segments

        # sort the list by the first elemnt
        total_segments.sort(key=lambda s: s[1])
        # sort the list by the second element
        total_segments.sort(key=lambda i: i[0])

        return total_segments

    def get_log_scale(self, lst):

        filelength = 0
        unscaled_bar = []

        for ele in lst:
            start = ele[0]
            stop = ele[1]
            length = stop - start
            state = ele[2]
            filelength += length


            if state is True:
                unscaled_bar.append(length * "1")
            else:
                unscaled_bar.append(length * "0")

        single_unit = filelength / 1000
        scaled_bar = ""

        for i in unscaled_bar:
            rescaled_size = len(i) / single_unit

            if rescaled_size >= 1:
                if "1" in i:
                    scaled_bar += (int(rescaled_size) * "█")
                else:
                    scaled_bar += (int(rescaled_size) * "▒")

        return scaled_bar #TODO: check if 100


if __name__ == '__main__':
    log1_test = [['sub', 8, 10], ['ins', 11, 13], ['del', 0, 61000], ['del', 0, 61000], ['sub', 0, 20], ['sub', 0, 40]]
    log2_test = [30, [[0, 5], [9, 15]], [[6, 8], [15, 20]]]
    log3_test = [30, [], []]
    log4_test = [1078748, [[59660, 60160], [114118, 114618], [288909, 289409], [609803, 610603], [790708, 791208], [835256, 835756]], [[33329, 33829], [158503, 159003], [175534, 176034], [295790, 296290], [420319, 420819]]]
    log5_test = [[0, 20], [0, 40], [166911, 167411], [487805, 488605], [668710, 669210], [713258, 713758]]
    log6_test = [1056248, [[0, 12200], [12444, 13001], [16382, 16614], [16900, 17488], [17988, 18230], [18978, 19780], [22579, 23251], [24234, 24544], [25191, 25315], [25565, 26065], [26996, 27496], [27758, 28071], [28405, 28639], [29139, 29405], [30395, 30501], [31334, 31487], [32870, 33067], [33296, 33796], [34067, 34215], [35215, 35314], [36099, 38017], [38145, 38604], [39104, 39200], [39745, 40032], [40508, 41008], [41076, 41177], [41298, 41453], [42024, 43322], [45854, 46817], [47547, 48047], [49302, 50316], [50673, 50852], [51852, 52022], [52449, 52993], [55660, 56160], [56603, 57103], [59179, 59723], [59796, 60563], [60816, 61316], [62068, 62438], [63515, 63669], [64423, 64758], [65179, 65471], [65971, 66028], [66851, 67097], [67896, 67998], [68498, 68972], [69434, 69464], [70464, 71284], [71488, 71500], [72215, 72372], [73565, 73938], [73956, 74796], [76251, 76304], [78769, 78921], [79421, 80137], [80637, 82038], [82663, 83163], [84610, 84612], [84637, 85324], [86324, 87528], [89099, 89102], [89638, 89711], [90635, 90754], [90906, 91168], [92781, 92869], [93347, 94483], [94983, 95217], [96378, 96681], [97724, 98224], [98365, 98865], [98985, 99678], [99700, 99757], [100901, 100919], [101153, 101653], [101845, 102345], [102382, 102722], [103235, 103382], [103538, 104038], [104271, 104436], [104447, 105001], [105066, 105369], [106124, 107067], [107251, 107923], [108091, 108251], [109555, 109783], [110149, 111072], [111302, 112404], [112842, 113491], [113644, 114144], [116752, 116880], [117380, 117512], [118541, 118966], [119466, 119614], [120114, 120425], [121255, 121358], [121858, 122255], [126533, 126820], [126931, 127572], [127889, 128330], [128856, 129356], [129822, 129994], [130775, 131131], [132136, 132636], [133682, 133961], [137816, 139094], [139169, 140250], [140750, 140832], [141006, 141010], [142615, 142730], [143286, 143710], [144210, 144711], [145969, 146629], [147859, 147975], [148700, 149859], [149893, 150208], [150708, 150790], [151639, 151945], [152445, 152545], [153114, 153173], [153673, 154899], [155851, 155892], [157699, 157950], [158950, 158961], [159461, 159618], [160140, 160900], [162381, 162541], [163178, 163912], [164412, 164637], [164935, 165227], [165727, 165779], [165901, 166958], [167461, 167658], [170113, 170463], [170501, 170828], [171328, 171355], [171862, 172362], [172593, 173187], [173466, 174163], [175191, 175691], [177604, 178150], [178902, 179333], [180033, 180359], [180859, 181493], [181649, 181869], [182530, 182644], [183552, 183671], [185323, 186425], [186816, 187582], [187738, 188503], [189866, 190496], [191482, 191982], [192372, 192536], [194202, 194304], [197053, 197644], [197974, 198189], [199051, 199841], [199965, 200183], [200490, 200519], [200978, 201273], [202236, 202736], [204643, 204766], [206126, 206151], [206651, 206695], [207195, 207626], [208815, 209315], [209783, 210768], [211404, 212139], [212453, 213646], [213794, 214294], [214363, 214632], [215132, 215317], [216621, 216652], [217553, 217732], [217786, 218291], [218554, 218639], [218808, 219237], [219737, 219808], [220668, 221168], [221778, 222076], [223880, 224063], [227434, 227563], [227569, 228069], [228437, 228749], [229609, 230104], [230111, 230588], [231088, 231602], [232614, 232857], [233215, 233715], [233972, 234767], [238159, 238452], [239452, 239766], [240984, 241484], [242225, 242632], [242886, 243540], [243996, 244496], [244819, 244953], [245953, 246086], [246100, 246397], [247827, 247926], [248426, 248730], [249230, 249327], [249403, 249932], [250432, 250567], [250616, 251116], [251404, 251904], [254692, 255192], [257352, 257712], [258060, 258303], [258803, 258997], [260228, 260694], [263717, 264067], [264965, 265217], [266798, 267369], [267798, 267837], [269304, 269307], [270716, 271216], [271539, 272039], [274573, 275073], [275350, 275850], [277327, 277827], [278035, 278099], [280151, 280387], [280887, 281065], [281121, 281627], [282680, 283141], [284722, 285222], [287794, 288294], [288747, 289373], [289407, 289927], [290799, 291540], [291566, 292313], [293332, 293832], [295088, 295368], [295868, 295907], [296410, 296515], [297461, 297974], [298773, 299317], [299719, 300533], [300810, 300887], [301195, 301901], [301968, 302523], [302720, 302925], [303425, 303729], [304382, 304427], [304752, 305252], [305797, 305930], [307110, 308177], [308657, 309177], [309675, 309715], [309716, 310241], [310447, 310947], [313777, 314277], [315196, 315326], [315826, 317139], [317639, 317840], [317872, 318273], [320575, 321070], [321570, 322397], [323107, 323580], [325417, 325458], [329271, 329700], [330200, 331095], [333311, 333811], [335604, 336104], [337111, 337273], [337328, 337828], [338236, 338360], [338378, 338591], [339238, 339738], [340023, 341148], [341239, 341285], [342285, 343463], [343536, 344036], [344948, 345448], [345943, 346919], [347329, 347485], [349933, 350433], [352245, 352745], [352933, 352993], [353558, 353564], [353647, 354147], [356811, 357337], [357612, 358112], [358605, 358732], [359577, 360434], [360481, 361160], [361174, 362590], [363090, 363604], [365133, 365633], [366131, 367114], [367233, 367733], [369628, 369717], [370717, 370736], [371236, 371380], [371629, 372129], [373434, 374197], [375848, 376963], [377463, 377564], [377566, 378066], [378368, 378429], [378564, 378670], [380232, 380779], [381724, 382129], [385360, 386079], [386377, 387123], [387286, 387918], [388058, 388127], [389127, 389558], [389693, 390483], [390850, 390898], [393280, 393780], [395158, 395658], [395686, 396643], [397143, 397197], [397697, 397966], [398766, 398786], [398794, 398915], [399415, 399819], [399988, 400488], [401158, 401374], [401796, 402296], [403055, 403137], [403660, 403819], [404319, 404705], [405983, 406483], [407182, 407252], [407752, 408341], [408505, 408543], [410671, 411171], [413099, 414063], [414248, 415046], [417057, 417557], [418307, 418807], [418840, 419340], [420862, 421038], [423142, 423856], [424422, 424484], [425484, 425910], [427934, 428698], [430423, 431062], [432474, 433171], [433671, 434072], [434836, 435364], [437260, 437760], [440738, 440840], [441840, 441944], [442405, 442905], [444572, 445072], [445194, 445479], [445979, 446434], [446934, 447172], [448773, 448902], [449535, 450068], [454035, 454527], [456072, 457330], [457639, 458139], [458757, 459003], [459503, 459679], [459682, 459906], [460179, 460181], [461082, 461167], [461670, 462574], [462752, 463252], [463489, 463989], [464417, 464569], [465959, 466459], [466623, 467172], [467296, 467628], [468128, 468189], [468835, 470152], [471038, 471342], [471842, 472190], [472230, 472243], [474208, 474275], [475376, 475876], [476901, 477133], [477645, 477985], [478123, 478623], [478912, 479412], [480275, 481027], [481524, 481827], [482612, 483112], [485930, 486378], [486878, 487463], [488635, 488920], [489361, 489363], [489420, 489635], [490998, 491551], [492881, 493381], [495567, 495717], [497909, 498409], [498442, 498488], [498988, 499442], [500113, 500848], [501658, 501670], [502170, 503659], [504508, 504890], [505390, 505508], [505846, 506346], [507395, 507895], [508924, 509537], [510431, 510931], [511455, 511653], [512576, 512938], [513278, 513778], [514651, 515151], [515582, 515698], [517057, 517704], [518904, 519404], [519629, 520129], [521518, 521676], [523504, 524004], [526091, 526330], [528687, 528703], [529820, 530155], [532274, 532774], [535266, 535826], [537080, 537748], [539196, 539263], [539763, 540009], [540181, 540211], [540711, 540757], [541265, 541889], [542119, 542577], [544220, 544792], [545435, 545447], [546021, 546766], [547239, 547739], [548352, 548852], [549505, 549723], [550084, 550584], [550697, 551197], [552499, 553215], [553717, 554582], [554601, 555101], [555441, 555864], [558415, 559142], [559163, 559663], [560561, 561061], [561226, 561549], [562049, 562226], [563152, 563180], [563704, 563805], [564464, 564510], [568420, 568920], [569818, 570318], [570588, 571502], [571879, 572755], [577730, 578230], [578952, 579147], [580130, 580630], [582760, 583141], [584114, 584522], [584981, 585166], [585953, 586025], [586525, 586979], [587691, 587727], [596236, 596736], [599225, 600162], [600406, 600906], [601083, 601548], [602916, 603395], [604415, 604779], [605279, 606202], [606762, 606866], [607366, 607389], [608889, 610122], [610258, 610758], [612165, 612200], [614085, 614585], [614819, 615319], [615483, 615983], [620835, 621715], [622398, 622697], [623202, 623702], [625996, 626496], [627489, 627980], [629013, 629513], [630339, 630552], [631052, 631339], [633800, 634909], [635409, 635860], [635989, 636948], [637998, 638516], [640887, 641063], [643225, 643725], [646160, 646660], [647563, 648063], [648219, 648719], [649925, 650599], [654715, 655215], [655222, 655313], [655552, 655654], [655930, 656552], [656723, 657043], [657616, 657975], [659315, 659489], [660502, 660785], [661381, 661535], [662535, 662881], [664905, 665405], [666114, 666970], [667508, 668008], [669477, 669955], [670066, 670985], [671848, 672348], [675765, 676421], [676840, 676911], [678894, 679042], [680814, 681267], [681767, 682223], [683923, 684754], [686947, 687443], [687458, 688179], [688577, 689077], [692488, 692988], [698743, 699552], [700672, 701006], [703076, 703282], [703782, 703938], [704220, 704363], [704952, 705474], [705974, 706108], [708600, 709100], [710048, 710086], [712679, 713179], [716747, 718161], [719078, 719187], [720030, 720346], [720968, 721845], [723515, 724015], [727057, 727390], [728335, 728448], [728975, 729335], [729556, 729692], [730192, 730666], [733286, 733786], [734615, 734879], [735379, 735615], [738966, 739727], [740416, 740813], [741833, 742333], [742528, 743028], [743286, 744188], [746012, 746511], [747011, 747012], [754156, 754782], [757245, 757745], [759728, 760228], [761095, 761171], [761671, 761953], [762368, 762868], [763147, 763302], [764302, 764647], [766372, 766872], [768647, 769183], [769781, 770281], [775059, 776021], [777773, 778132], [778632, 778746], [781406, 781622], [786073, 786701], [787626, 788126], [788623, 789123], [790031, 790531], [792813, 793055], [794747, 795247], [795388, 795888], [796015, 796517], [797017, 797320], [800547, 800550], [801382, 801547], [802439, 802939], [803415, 804215], [804715, 805249], [809320, 809820], [809986, 810486], [814130, 814630], [814996, 815496], [818390, 819021], [819229, 819729], [821802, 822160], [822660, 822701], [830407, 830907], [831134, 831634], [833071, 833731], [835771, 837410], [838555, 839055], [843469, 843613], [844113, 844469], [849310, 849810], [852858, 853358], [853529, 853537], [854037, 854592], [854905, 855405], [858516, 859016], [859104, 859604], [860138, 860210], [861058, 861415], [863076, 863411], [865316, 865814], [869095, 869595], [873426, 873926], [876581, 877081], [881257, 881757], [881825, 882325], [885519, 886019], [888827, 889417], [890908, 891408], [892047, 892547], [894609, 894783], [897523, 898023], [914338, 914838], [942706, 943206], [944665, 945165], [947399, 947603], [961264, 961764], [976903, 977403], [986729, 987229], [993392, 993892], [997087, 997587], [1015490, 1015990], [1017550, 1018050]], [[0, 23046], [25183, 26033], [27258, 28071], [28639, 29413], [30269, 30769], [31987, 32370], [32612, 34055], [35761, 35787], [38441, 39104], [39700, 39745], [40906, 41406], [42024, 42132], [42856, 43355], [44514, 45014], [45083, 45583], [45693, 45854], [46725, 46785], [46930, 47430], [48427, 48927], [49787, 49977], [50923, 51423], [52549, 53049], [53472, 54047], [54494, 56140], [57682, 58559], [58643, 59143], [62175, 62675], [62883, 62990], [63669, 63923], [65971, 66988], [67998, 68934], [69162, 69738], [71441, 71614], [72872, 73316], [76251, 76663], [77304, 78239], [78921, 79421], [80137, 80637], [81331, 81627], [82357, 83095], [84612, 85342], [85652, 86152], [87577, 87727], [87849, 88349], [89711, 90135], [91668, 91705], [91766, 91881], [92869, 93462], [94483, 95564], [97642, 98145], [98598, 99542], [100757, 101014], [101149, 101649], [102722, 102735], [103235, 103269], [104566, 105066], [105547, 106047], [106864, 108091], [108277, 109381], [112069, 112904], [114030, 115039], [116880, 118041], [118966, 119466], [119606, 119614], [121358, 122304], [123998, 124056], [125298, 125615], [126533, 126975], [128737, 129994], [131631, 131986], [135504, 136004], [136033, 136060], [136560, 136605], [139463, 139963], [140750, 141010], [141232, 141955], [143230, 143548], [143710, 144210], [146188, 146674], [147617, 148200], [150208, 150753], [151945, 152445], [153114, 153168], [153173, 153673], [154245, 154745], [156386, 156969], [157483, 158266], [159175, 159675], [161420, 161881], [163457, 163912], [164868, 165227], [165727, 165885], [166958, 166961], [167461, 167658], [168402, 169062], [170828, 171355], [173755, 174274], [174472, 175446], [177562, 178091], [179155, 179333], [179833, 180102], [180359, 180859], [181607, 182030], [182808, 183052], [184268, 184768], [185675, 186175], [186318, 186439], [188134, 188323], [188973, 189647], [190996, 191468], [192372, 192549], [193309, 193404], [193659, 194159], [195622, 196066], [196620, 197120], [197214, 197349], [198189, 198551], [199407, 199465], [199965, 200490], [203810, 204058], [204907, 205407], [206151, 207195], [207705, 207713], [207787, 208658], [210051, 210904], [213388, 213863], [214464, 215132], [216639, 217053], [217813, 218291], [218510, 218639], [219017, 219737], [219959, 220820], [222170, 222670], [224092, 224592], [226618, 226682], [227582, 228525], [229249, 229609], [230126, 231088], [231116, 231616], [232857, 233357], [233882, 235540], [235680, 236180], [236240, 236906], [238452, 239229], [240723, 241223], [241841, 242225], [243935, 244162], [244953, 245059], [245559, 245576], [246803, 247303], [247926, 248730], [249865, 250843], [251364, 251436], [253227, 253704], [254843, 255434], [258303, 260129], [261214, 261446], [262302, 262815], [263016, 263516], [264567, 265437], [267672, 267798], [267892, 267948], [269307, 269403], [270472, 270641], [271170, 271190], [271454, 271605], [272683, 272959], [273511, 274011], [275651, 276021], [277293, 277443], [278016, 278054], [278099, 278773], [279505, 280005], [280387, 280887], [281627, 282006], [282946, 283834], [284834, 285066], [286570, 286877], [287377, 287534], [289927, 290731], [291540, 292040], [293325, 294194], [295368, 295907], [297045, 297461], [299874, 300374], [301522, 301598], [302720, 302856], [304927, 305099], [306033, 306217], [306624, 307124], [307653, 308018], [308024, 308157], [309175, 309750], [310750, 310956], [312574, 313246], [313889, 314696], [315326, 315826], [316634, 316872], [317139, 317813], [318813, 319185], [319559, 320059], [321070, 321570], [322513, 322607], [323107, 323263], [326271, 326771], [327124, 327808], [328026, 328526], [329700, 330200], [331537, 332037], [333449, 334178], [334730, 335720], [337111, 337736], [339091, 339378], [340547, 340849], [341176, 341676], [342532, 343032], [343650, 343687], [343740, 344907], [346033, 346295], [346329, 346965], [347262, 347703], [347756, 348256], [349761, 350087], [350658, 351250], [352993, 353058], [353558, 353564], [354486, 355096], [355533, 356197], [357566, 358066], [358698, 359077], [360586, 361042], [361376, 361876], [362267, 363090], [363669, 363771], [364271, 364483], [366843, 367343], [368524, 370753], [371657, 372601], [375291, 375791], [376963, 377604], [378368, 378885], [379703, 380203], [382629, 382844], [383030, 383530], [384722, 385015], [386949, 387838], [388127, 388865], [390898, 390973], [391066, 392080], [394558, 395058], [395171, 395197], [396643, 397243], [398786, 399415], [400593, 401093], [401874, 402098], [403660, 403819], [405430, 405940], [408983, 409483], [410248, 410356], [410888, 411388], [411966, 412043], [412118, 412618], [413381, 413422], [415937, 416437], [416955, 417332], [418938, 418955], [419836, 420336], [420744, 421244], [421805, 422642], [424254, 425445], [427130, 427630], [427786, 428286], [430119, 430541], [430736, 431062], [432953, 433671], [434572, 434822], [435365, 435614], [436114, 436513], [437312, 437812], [438186, 438686], [439424, 439630], [440604, 440840], [443828, 444328], [445479, 445979], [447436, 447451], [448436, 450089], [451498, 451998], [452306, 453175], [453460, 453960], [455027, 455170], [456569, 456876], [457370, 458503], [459679, 460179], [461983, 462636], [464087, 464587], [466242, 466601], [467172, 468128], [470860, 471028], [471896, 472034], [473175, 473675], [474780, 475589], [476985, 477133], [478078, 478082], [479643, 479735], [479891, 480391], [481425, 482495], [484006, 484506], [484873, 485512], [486378, 487294], [488040, 488540], [488920, 489863], [492216, 492716], [493484, 493589], [494345, 494845], [495717, 496000], [496650, 497150], [498488, 499446], [500848, 501158], [501670, 502647], [504890, 505390], [505914, 506414], [507186, 508136], [508682, 508848], [511455, 512060], [512673, 512935], [513820, 514320], [515470, 515582], [516549, 517049], [517563, 517855], [518915, 519433], [521121, 522029], [522879, 523421], [524216, 525774], [526003, 526503], [529365, 529820], [531334, 531347], [531846, 532346], [532996, 533055], [534008, 534487], [536428, 536647], [536826, 536882], [538943, 539170], [540009, 540711], [541319, 541819], [543007, 543651], [546157, 546200], [547143, 547561], [548130, 548648], [550015, 551038], [551432, 551932], [552662, 553236], [556449, 557002], [558118, 558618], [560096, 560596], [561549, 562049], [563680, 563704], [564297, 565253], [566766, 566941], [568466, 568966], [569455, 570396], [571123, 571623], [573719, 574228], [575603, 576103], [576262, 576392], [577137, 577637], [579147, 580067], [581281, 582260], [584682, 585182], [586025, 586525], [587691, 587818], [589976, 591248], [594940, 595440], [597121, 597621], [599218, 599856], [600244, 600248], [600583, 601083], [602232, 602732], [605279, 605510], [605938, 606262], [607366, 607728], [608036, 608536], [609267, 609767], [610388, 610888], [611943, 612481], [613266, 613766], [614287, 615234], [616647, 617147], [618259, 618759], [619940, 620440], [621350, 621850], [623119, 623221], [623821, 624321], [625573, 626047], [626824, 627480], [630552, 631052], [632348, 632917], [634909, 635659], [642165, 642519], [643590, 644478], [649344, 649853], [650698, 651331], [652378, 652916], [653296, 653796], [655654, 656154], [657714, 657975], [659489, 659787], [661316, 662406], [663563, 664063], [664320, 664820], [668759, 669249], [669955, 670113], [672397, 673191], [673932, 674413], [674543, 675043], [676266, 676625], [677559, 677783], [678584, 679042], [681122, 681767], [683050, 683550], [685417, 685917], [686947, 687324], [687443, 687943], [688489, 688989], [689093, 689825], [691881, 692015], [692554, 693200], [693220, 693292], [697902, 698402], [700127, 700172], [704934, 705434], [705474, 705974], [707695, 708184], [710048, 710081], [711930, 712433], [714836, 715336], [717226, 718177], [719078, 719414], [722904, 723404], [724408, 724908], [728217, 728298], [728948, 728975], [729692, 730192], [731560, 732060], [732220, 732720], [734879, 735379], [736797, 737376], [738337, 738837], [746511, 747011], [748537, 749751], [750494, 750994], [752120, 752620], [753480, 753980], [755604, 755809], [755966, 756466], [757801, 758179], [759454, 759954], [762036, 762536], [762959, 764134], [765437, 765937], [770278, 771174], [776281, 777128], [778132, 778632], [779324, 779842], [782713, 783213], [783854, 784354], [785525, 786025], [787132, 787632], [788780, 789377], [790921, 791421], [792031, 792531], [793565, 793919], [796266, 796517], [798441, 798781], [801050, 801382], [804215, 804715], [808706, 809724], [811863, 812053], [812706, 813206], [814020, 814520], [816598, 817098], [817797, 818297], [820387, 820887], [822160, 822660], [826813, 827313], [829193, 829693], [830463, 830963], [832671, 832741], [835268, 835768], [841398, 841572]]]

    instance = BaseTest()

    updated_log = instance.manipulation_log_update(log1_test, log4_test)
    print(updated_log)

    array_log = instance.get_log_arr(updated_log)
    print(array_log)
    
    log_scale = instance.get_log_scale(array_log)
    print(log_scale)


    array_log_2 = instance.get_log_arr(log6_test)
    print(array_log_2)
    print(instance.get_log_scale(array_log_2))
